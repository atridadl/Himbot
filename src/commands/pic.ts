import { BucketScope, Command, container } from '@sapphire/framework';
import { AttachmentBuilder } from 'discord.js';
import Replicate from 'replicate';

const replicate = new Replicate({
	auth: process.env.REPLICATE_API_TOKEN
});

export class PicCommand extends Command {
	public constructor(context: Command.LoaderContext) {
		super(context, {
			description: 'Generate an image using Stability AI! Cooldown 1 Minute to prevent spam!',
			options: ['prompt'],
			cooldownDelay: 100_000,
			cooldownLimit: 1,
			// Yes... I did hardcode myself.
			cooldownFilteredUsers: ['83679718401904640'],
			cooldownScope: BucketScope.User
		});
	}

	// Register Chat Input and Context Menu command
	public override registerApplicationCommands(registry: Command.Registry) {
		registry.registerChatInputCommand((builder) =>
			builder
				.setName(this.name)
				.setDescription(this.description)
				.addStringOption((option) =>
					option.setName('prompt').setDescription('The prompt you will use to generate an image!').setRequired(true)
				)
		);
	}

	// Chat Input (slash) command
	public async chatInputRun(interaction: Command.ChatInputCommandInteraction) {
		const prompt = interaction.options.getString('prompt') || 'NOTHING';

		await interaction.reply({ content: 'ðŸ¤” Thinking... ðŸ¤”', fetchReply: true });

		let result = (await replicate.run('stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b', {
			input: {
				width: 1024,
				height: 1024,
				prompt,
				disable_safety_checker: true,
				refine: 'expert_ensemble_refiner',
				scheduler: 'KarrasDPM',
				num_outputs: 1,
				guidance_scale: 7.5,
				high_noise_frac: 0.8,
				prompt_strength: 0.8,
				num_inference_steps: 50
			}
		})) as string[];

		if (result.length <= 0) {
			const content = `Sorry, I can't complete the prompt for: ${prompt}`;

			return interaction.editReply({
				content: content
			});
		} else {
			const imageUrl = result[0] || '';
			// get an array buffer
			const imageBuffer = await fetch(imageUrl).then((r) => r.arrayBuffer());

			const imageAttachment: AttachmentBuilder[] = [];

			imageAttachment.push(
				new AttachmentBuilder(Buffer.from(new Uint8Array(imageBuffer)), {
					name: 'himbot_response.jpg',
					description: `An image generated by Himbot using the prompt: ${prompt}`
				})
			);

			const content = `Prompt: ${prompt}`;

			return interaction.editReply({
				content,
				files: imageAttachment
			});
		}
	}
}

void container.stores.loadPiece({
	store: 'commands',
	name: 'pic',
	piece: PicCommand
});
