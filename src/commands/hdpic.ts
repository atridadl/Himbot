import { BucketScope, Command, container } from '@sapphire/framework';
import { AttachmentBuilder } from 'discord.js';
import OpenAI from 'openai';

const openai = new OpenAI({
	apiKey: process.env.OPENAI_API_KEY
});

export class HDPicCommand extends Command {
	public constructor(context: Command.LoaderContext) {
		super(context, {
			description: 'Generate an image using OpenAI! Cooldown of 10 Minutes due to cost!',
			options: ['prompt'],
			cooldownDelay: 480_000,
			cooldownLimit: 1,
			cooldownFilteredUsers: ['83679718401904640'],
			cooldownScope: BucketScope.User
		});
	}

	// Register Chat Input and Context Menu command
	public override registerApplicationCommands(registry: Command.Registry) {
		registry.registerChatInputCommand((builder) =>
			builder
				.setName(this.name)
				.setDescription(this.description)
				.addStringOption((option) =>
					option.setName('prompt').setDescription('The prompt you will use to generate an image!').setRequired(true)
				)
		);
	}

	// Chat Input (slash) command
	public async chatInputRun(interaction: Command.ChatInputCommandInteraction) {
		const prompt = interaction.options.getString('prompt') || '';

		await interaction.reply({ content: 'ðŸ¤” Thinking... ðŸ¤”', fetchReply: true });

		try {
			const response = await openai.images.generate({
				model: 'dall-e-3',
				prompt,
				n: 1,
				size: '1024x1024',
				quality: 'standard'
			});

			const imageUrl = response.data[0].url || '';
			// get an array buffer
			const imageBuffer = await fetch(imageUrl).then((r) => r.arrayBuffer());

			const imageAttachment: AttachmentBuilder[] = [];

			imageAttachment.push(
				new AttachmentBuilder(Buffer.from(new Uint8Array(imageBuffer)), {
					name: 'himbot_response.jpg',
					description: `An image generated by Himbot using the prompt: ${prompt}`
				})
			);

			const content = `Prompt: ${prompt}:`;

			return interaction.editReply({
				content,
				files: imageAttachment
			});
		} catch (error) {
			const content = "Sorry, I can't complete the prompt for: " + prompt + '\n' + error;

			return interaction.editReply({ content });
		}
	}
}

void container.stores.loadPiece({
	store: 'commands',
	name: 'hdpic',
	piece: HDPicCommand
});
